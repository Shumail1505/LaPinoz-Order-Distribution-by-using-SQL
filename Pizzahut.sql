-- retrieve the total number of orders placed
select count(*) as total_orders from orders;
-- This query simply counts the total number of rows in the orders table, giving us the total number of orders placed.


-- Calculate total revenue generated by pizza sale
SELECT ROUND(SUM(order_details.quantity * pizzas.price),2) AS pizza_sales
FROM order_details
JOIN pizzas 
ON order_details.pizza_id = pizzas.pizza_id;
-- Here, we are calculating the total revenue by multiplying the quantity of each pizza ordered by its price and summing up these values.
-- The result is rounded to two decimal places.


-- identify highest price of piza
SELECT pizza_types.name, MAX(pizzas.price)
FROM pizza_types
JOIN pizzas 
ON pizza_types.pizza_type_id = pizzas.pizza_type_id;
-- This query finds the highest-priced pizza by joining the pizza_types and pizzas tables and using the MAX() function on the price column.
    

-- Identify most common pizza size ordered
SELECT COUNT(order_details.quantity) AS total_quantity, pizzas.size
FROM order_details
JOIN pizzas 
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY size
ORDER BY total_quantity DESC
LIMIT 1;
-- This query determines the most common pizza size by counting the total quantity of each size ordered, grouping by size, and 
-- ordering the results in descending order. The LIMIT 1 clause returns the most common size.



-- list the top five most common pizzas with there order quantity 
SELECT pizza_types.name, SUM(order_details.quantity) AS total_quantity
FROM order_details
JOIN pizzas 
ON order_details.pizza_id = pizzas.pizza_id
join pizza_types 
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
GROUP BY pizza_types.name
ORDER BY total_quantity DESC
LIMIT 5;
-- This query identifies the top five most ordered pizzas by summing the quantities of each pizza type and ordering the results in 
-- descending order.



-- Join the necessery tables to find the total quantity of each pizza ordered
Select pizza_types.category, sum(order_details.quantity) as total_times_order
from order_details 
join pizzas
on order_details.pizza_id = pizzas.pizza_id
join pizza_types
on pizzas.pizza_type_id = pizza_types.pizza_type_id
group by pizza_types.category;
-- Here, we join the order_details, pizzas, and pizza_types tables to find the total quantity of pizzas ordered, grouped by category.



-- Determine the distribution of orders by hour of the day
SELECT COUNT(order_id), (SELECT HOUR(order_time)) AS Hour
FROM orders
GROUP BY Hour
ORDER BY hour;
-- This query counts the number of orders placed during each hour of the day. The HOUR() function extracts the hour from the order_time column



-- Join relevent tables to find the category wise distribution of pizzas
select category, count(name) from pizza_types
group by category;
-- This query groups pizzas by their category and counts the number of different pizza types in each category.


-- group the orders by date and calculate the average number of pizzas orderd per day
select round(avg (total_order_per_day),0) as avg_pizza_order_per_day from
(select sum(order_details.quantity) as total_order_per_day, orders.order_date
from orders
join order_details
on order_details.order_id = orders.order_id
group by orders.order_date) as details;
-- This query calculates the average number of pizzas ordered per day by first summing the daily orders and then averaging these sums.



-- Determine the top 3 most order pizza type based on revenue 
select pizza_types.name, sum(order_details.quantity*pizzas.price) as total_revenue
from pizza_types
join pizzas
on pizza_types.pizza_type_id = pizzas.pizza_type_id
join order_details
on order_details.pizza_id = pizzas.pizza_id
group by pizza_types.name
order by total_revenue desc limit 3;
-- This query finds the top 3 pizza types based on revenue by summing the revenue for each type and ordering the results in descending order.


-- Calculate percentage contribution of each pizza type to total revenue
SELECT pizza_types.category, 
ROUND((ROUND(SUM(pizzas.price * order_details.quantity),0) / (SELECT ROUND(SUM(pizzas.price * order_details.quantity), 0)
FROM pizzas
JOIN order_details 
ON pizzas.pizza_id = order_details.pizza_id) * 100), 1) AS total_revenue_per_pizza_type
FROM pizzas
JOIN order_details 
ON pizzas.pizza_id = order_details.pizza_id 
JOIN pizza_types 
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
GROUP BY pizza_types.category;
-- This query calculates the percentage contribution of each pizza type to the total revenue. 
-- It uses a subquery to get the total revenue and divides the revenue per pizza type by the total revenue.


-- Analyze the cumulative revenue generated over time
Select order_date, sum(Per_day_revenue) over(order by order_date) as cumulative_revenue
from
(select orders.order_date, round(sum(pizzas.price*order_details.quantity),0) as Per_day_revenue
from pizza_types
join pizzas
on pizzas.pizza_type_id = pizza_types.pizza_type_id
join order_details
on order_details.pizza_id = pizzas.pizza_id
join orders
on orders.order_id = order_details.order_id
group by orders.order_date) as Sales;
-- This query calculates the cumulative revenue over time using window functions. 
-- It first calculates daily revenue and then computes the cumulative sum.


-- Determine the top 3 most orderd pizza type based on revenue for each pizza category
select category,name,revenue, reven from
(select category, name, revenue, rank() over(partition by category order by revenue desc) as reven
from
(select pizza_types.category, pizza_types.name, sum(pizzas.price*order_details.quantity) as revenue
from pizza_types
join pizzas
on pizzas.pizza_type_id = pizza_types.pizza_type_id
join order_details
on pizzas.pizza_id = order_details.pizza_id
group by pizza_types.name
order by pizza_types.category) as a) as b
where reven <= 3;
-- This query finds the top 3 most ordered pizza types based on revenue for each category using window functions and ranking. 
-- The RANK() function is used to rank pizzas within each category based on their revenue.




